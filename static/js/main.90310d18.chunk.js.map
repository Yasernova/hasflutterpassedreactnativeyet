{"version":3,"sources":["components/flutter-sdk.png","components/react-native.png","components/Indicator.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Indicator","state","loading","hasPassed","flutter","react","diff","fetchFlutterStars","_callee","res","json","regenerator_default","a","wrap","_context","prev","next","fetch","sent","ok","abrupt","stargazers_count","Error","stop","fetchRNStars","_callee2","_context2","refetch","_callee3","_context3","_this","setState","Number","onRefresh","_callee4","_context4","numberFormatter","num","toString","replace","componentDidMount","_callee5","_context5","_this$state","this","react_default","createElement","id","concat","Math","abs","onClick","className","material_icons_react_default","icon","size","color","target","href","src","require","alt","Component","App","Indicator_Indicator","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.90310d18.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/flutter-sdk.545457b6.png\";","module.exports = __webpack_public_path__ + \"static/media/react-native.47ce6e77.png\";","import React, { Component } from 'react';\nimport MaterialIcon, { colorPalette } from 'material-icons-react';\n\nexport default class Indicator extends Component {\n\n  state = {\n    loading: true,\n    hasPassed: false,\n    flutter: 0,\n    react: 0,\n    diff: 0,\n  }\n\n  fetchFlutterStars = async () => {\n    const res = await fetch('https://api.github.com/repos/flutter/flutter')\n    if (res.ok) {\n      const json = await res.json();\n      return json.stargazers_count;\n    }\n    throw new Error('Ooops! Error encountered ðŸ’€')\n  }\n\n  fetchRNStars = async () => {\n    const res = await fetch('https://api.github.com/repos/facebook/react-native')\n    if (res.ok) {\n      const json = await res.json();\n      return json.stargazers_count;\n    }\n    throw new Error('Ooops! Error encountered ðŸ’€')\n  }\n\n  refetch = async () => {\n    this.setState({ loading: true })\n    const flutter = await this.fetchFlutterStars();\n    const react = await this.fetchRNStars();\n    const hasPassed = Number(flutter) > Number(react);\n    const diff = Number(react) - Number(flutter);\n    this.setState({ flutter, react, diff, hasPassed, loading: false });\n  }\n\n  onRefresh = async () => await this.refetch()\n\n  numberFormatter = (num) => {\n    return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  }\n\n\n  componentDidMount = async () => {\n    await this.refetch();\n  }\n\n  render() {\n    const { flutter, react, diff, hasPassed, loading } = this.state;\n    if (!flutter) return <div>loading..</div>\n    return (\n      <div id=\"indicator\">\n        <div id=\"result\">\n          <p>Has Flutter passed React Native yet ?</p>\n          <h1>{`${hasPassed ? 'YES' : 'NOPE'}`}</h1>\n          <p>{`${hasPassed ? 'Ahead' : 'Behind'}`} by {this.numberFormatter(Math.abs(diff))} stars!</p>\n        </div>\n        <div id=\"links\">\n          <div id=\"refresher\" onClick={this.onRefresh}>\n            <div className={loading ? 'loading' : ''}>\n              <MaterialIcon icon=\"refresh\" size={22} color=\"#333\" />\n            </div>\n          </div>\n          <a target=\"_blank\" href=\"https://github.com/flutter/flutter\">\n            <div className=\"sdk\">\n              <div className=\"img\">\n                <img src={require('./flutter-sdk.png')} alt=\"\" />\n              </div>\n              <p>{this.numberFormatter(flutter)}</p>\n              <MaterialIcon icon=\"star\" size={18} color=\"#333\" />\n            </div>\n          </a>\n          <a target=\"_blank\" href=\"https://github.com/facebook/react-native\">\n            <div className=\"sdk\">\n              <div className=\"img\">\n                <img src={require('./react-native.png')} alt=\"\" />\n              </div>\n              <p>{this.numberFormatter(react)}</p>\n              <MaterialIcon icon=\"star\" size={18} color=\"#333\" />\n            </div>\n          </a>\n        </div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport Indicator from './components/Indicator';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Indicator />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}